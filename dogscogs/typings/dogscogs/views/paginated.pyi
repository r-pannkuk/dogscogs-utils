import discord
import typing
from _typeshed import Incomplete

class OnCallbackSelect(discord.ui.Select):
    on_callback: typing.Callable[[list[str]], typing.Awaitable[None]]
    def __init__(self, *args, callback: typing.Callable[[list[str]], typing.Awaitable[None]], **kwargs) -> None: ...
    async def callback(self, interaction: discord.Interaction) -> None: ...

class PaginatedEmbed(discord.ui.View):
    message: discord.Message
    original_message: discord.Message | None
    interaction: discord.Interaction | None
    author: Incomplete
    get_page: typing.Callable[[int], typing.Awaitable[tuple[discord.Embed, int]]]
    total_pages: int
    index: int
    def __init__(self, *args, message: discord.Message | None = None, interaction: discord.Interaction | None = None, get_page: typing.Callable[[int], typing.Awaitable[tuple[discord.Embed, int]]], **kwargs) -> None: ...
    async def interaction_check(self, interaction: discord.Interaction) -> bool: ...
    async def send(self) -> None: ...
    async def edit_page(self) -> None: ...
    def update_buttons(self) -> None: ...
    async def first(self, interaction: discord.Interaction, button: discord.ui.Button): ...
    async def previous(self, interaction: discord.Interaction, button: discord.ui.Button): ...
    async def next(self, interaction: discord.Interaction, button: discord.ui.Button): ...
    async def last(self, interaction: discord.Interaction, button: discord.ui.Button): ...
    async def on_timeout(self) -> None: ...
    @staticmethod
    def compute_total_pages(total_results: int, results_per_page: int) -> int: ...
